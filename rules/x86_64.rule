+(_, 1) => (1) {
    mov [$1, use] [%1, def]
    inc [%1, use]
    out [%1, use]
}

+(_, 2) => (1) {
    mov [$1, use], [%1, def]
    add [%1, use], [2, use] // TODO: add reuse operand
    out [%1, use]
}

+(_, _) => (2) {
    // Move first parameter to virtual register and then
    // add the second parameter to it.
    mov [$1, use], [%1, def]
    add [%1, use], [$2, use]
    out [%1, use]
}

-(_, 1) => (1) {
    mov [$1, use], [%1, def]
    dec [%1, use]
    out [%1, use]
}

-(_, 2) => (1) {
    mov [$1, use] [%1, def]
    sub [%1, use], [2, use]
    out [%1, use]
}

<(_, _) => (2) {
    terminator // Marks terminator of block.
    cmp [$1, use], [$2, use]
    jl
}

<=(_, _) => (2) {
    terminator
    cmp [$1, use], [$2, use]
    jle
}

Î¦(_, _) => (0) {
    phi [$1, use], [$2, use], [%1, def]
    out [%1, use]
}

:=(_) => (0) {
    out [$1, use]
}

// # is for arbitrary arity arguments.
PCOPY(#_) => (1) {
    parmov [#$1, use], [#%1, def]
    out [#%1, use]
}

PROJ(_, _) => (1) {
    out [proj($1, $2), use]
}

CALL(_, _, _) => (5) {
    call [$2, use], [%rax, def], [%rcx, def], [%rdx, def], [%rsi, def], [%rdi, def], [%r8, def], [%r9, def], [%r10, def], [%r11, def]
    mov [%rax, use], [%1, def]
    out [$1, use], [%1, use]
}
CALL(_, _, _, _) => (5) {
    mov [$4, use], [%rdi, def]
    call [$2, use], [%rax, def], [%rcx, def], [%rdx, def], [%rsi, def], [%rdi, def], [%r8, def], [%r9, def], [%r10, def], [%r11, def]
    mov [%rax, use], [%1, def]
    out [$1, use], [%1, use]
}
CALL(_, _, _, _, _) => (5) {
    parmov [$4, use], [$5, use], [%rdi, def], [%rsi, def]
    call [$2, use], [%rax, def], [%rcx, def], [%rdx, def], [%rsi, def], [%rdi, def], [%r8, def], [%r9, def], [%r10, def], [%r11, def]
    mov [%rax, use], [%1, def]
    out [$1, use], [%1, use]
}
// TODO: handle more parameters

// Weird edge cases, don't emit anything in this case.
COPYTOREG(_, START) => (0) {
}
COPYTOREG(_, PROJ(CALL(_, _, _, #_), 0)) => (0) {
}

COPYTOREG(_, _) => (1) {
    // For COPYTOREG, the register name is the first parameter.
    mov [$3, use], [$1, def]
}

COPYFROMREG(_) => (0) {
    // For COPYFROMREG, the register name is the first parameter
    mov [$1, use], [%1, def]
    out [%1, use]
}

GOTO(_) => (1) {
    terminator
    jmp
}

GOTO => (1) {
    terminator
    jmp
}

NOP => (0) {
}

START => (0) {
}

RETURN(_, _) => (1) {
    terminator
    mov [$2, use], [%rax, def]
    out [%rax, use]
}

// pattern for handling immediates.
CONST => (1) {
    // For CONST, the first parameter is itself as an immediate.
    out [$1, use]
}